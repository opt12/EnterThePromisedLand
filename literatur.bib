% This file was created with Citavi 5.4.0.2

@misc{.b,
 abstract = {How to manage asynchronous functions.},
 title = {Callbacks, promises, generators - asynchronous javascript},
 url = {http://www.slideshare.net/wookieb/callbacks-promises-generators-asynchronous-javascript},
 urldate = {2016-10-25}
}


@article{Ananda.1992,
 author = {Ananda, A. L. and Tay, B. H. and Koh, E. K.},
 year = {1992},
 title = {A survey of asynchronous remote procedure calls},
 pages = {92--109},
 pagination = {page},
 volume = {26},
 number = {2},
 issn = {01635980},
 journal = {ACM SIGOPS Operating Systems Review},
 doi = {10.1145/142111.142121}
}


@proceedings{Bertin.,
 title = {the 1st Workshop},
 editor = {Bertin, Emmanuel and Crespi, Noel and Glitho, Roch}
}


@inproceedings{Brodu.,
 author = {Brodu, Etienne and Fr{\'e}not, St{\'e}phane and Obl{\'e}, Fr{\'e}d{\'e}ric},
 title = {Toward automatic update from callbacks to promises},
 keywords = {Flow programming;JavaScript;Web},
 pages = {1--8},
 bookpagination = {page},
 editor = {Bertin, Emmanuel and Crespi, Noel and Glitho, Roch},
 booktitle = {the 1st Workshop},
 doi = {10.1145/2749215.2749216}
}


@misc{Buckler2016,
 abstract = {This article looks back on the history of JavaScript as it has just recently reached its 18th birthday.},
 author = {Buckler, Craig},
 year = {2013},
 title = {JavaScript Comes of Age - SitePoint},
 url = {https://www.sitepoint.com/javascript-comes-age/},
 urldate = {2016-11-24},
 date = {2013-12-16},
 month = {12}
}


@misc{Capan.2013,
 abstract = {Node.js was never created to solve the compute scaling problem. It was created to solve the I/O scaling problem. Find out why, with case-by-case tutorial.},
 author = {Capan, Tomislav},
 year = {2013},
 title = {Why The Hell Would I Use Node.js? A Case-by-Case Tutorial},
 url = {https://www.toptal.com/nodejs/why-the-hell-would-i-use-node-js},
 urldate = {2016-11-27}
}


@misc{Crockford.2001,
 author = {Crockford, Douglas},
 year = {2001},
 title = {JavaScript: The World's Most Misunderstood Programming Language},
 url = {http://javascript.crockford.com/javascript.html},
 urldate = {2016-11-26}
}


@book{Crockford.2008,
 abstract = {Most programming languages contain good and bad parts, but JavaScript has more than its share of the bad, having been developed and released in a hurry before it could be refined. This authoritative book scrapes away these bad features to reveal a subset of JavaScript that's more reliable, readable, and maintainable than the language as a whole-a subset you can use to create truly extensible and efficient code.  Considered the JavaScript expert by many people in the development community, author Douglas Crockford identifies the abundance of good ideas that make JavaScript an outstanding objec},
 author = {Crockford, Douglas},
 year = {2008},
 title = {JavaScript: the good parts},
 price = {23.99 (NL)},
 keywords = {JavaScript (Computer program language);JScript;Online-Publikation},
 address = {Beijing},
 publisher = {O'Reilly},
 isbn = {978-0-596-51774-8}
}


@misc{Crockford.2008a,
 author = {Crockford, Douglas},
 year = {2008},
 title = {JavaScript: The World's Most Misunderstood Programming Language Has Become the World's Most Popular Programming Language},
 url = {http://javascript.crockford.com/popular.html},
 urldate = {2016-11-26}
}


@book{Daggett.2013,
 author = {Daggett, Mark E.},
 year = {2013},
 title = {Expert JavaScript: [take a deep dive into JavaScript and build better applications]},
 address = {New York, NY},
 publisher = {{Apress / Springer}},
 isbn = {978-1-4302-6097-4},
 series = {Books for professionals by professionals}
}


@book{Daggett.2013b,
 author = {Daggett, Mark E.},
 year = {2013},
 title = {Expert JavaScript: [take a deep dive into JavaScript and build better applications]},
 keywords = {Apress;Computer Science;Computers {\&} Technology;Education {\&} Reference;JavaScript;Languages {\&} Tools;Programming;Programming Languages;Web Development {\&} Design},
 address = {New York, NY},
 publisher = {{Apress / Springer}},
 isbn = {9781430260981},
 series = {Books for professionals by professionals}
}


@misc{Dahl.2009,
 abstract = {The first presentation on Node.js from Ryan Dahl at JSConf 2009},
 author = {Dahl, Ryan},
 year = {2009},
 title = {Original Node.js presentation},
 url = {https://www.youtube.com/watch?v=ztspvPYybIY},
 keywords = {dahl;JavaScript;Node.js;ryan},
 urldate = {2016-11-25},
 date = {2009-11-8},
 month = {11}
}


@misc{Dahl.2010,
 abstract = {Node.js aims to abstract the problem of concurrency and allow programmers with little experience to easily create servers that scale into the thousands of connections. This interview with the creator of Node.js, Ryan Dahl goes beyond the basic introductory information and focuses on motivations, internals and real-world issues like debugging, monitoring and scaling in the large.},
 author = {Synodinos, Dio},
 year = {2010},
 title = {Deep inside Node.js with Ryan Dahl},
 url = {https://www.infoq.com/interviews/node-ryan-dahl},
 keywords = {Architecture;Development;Dynamic Languages;Functional Programming;JavaScript;node ryan dahl;Node.js;QCon;QCon San Francisco 2010;Web Development},
 urldate = {2016-11-26},
 date = {2010-12-13},
 month = {12}
}


@misc{Dandapani.2015,
 abstract = {es6-blog-callbacks.js},
 author = {Dandapani, Subhas (RDX)},
 year = {2015},
 title = {es6-blog-callbacks.js},
 url = {https://gist.github.com/rdsubhas/bada459c7204886accda#file-callbacks-js},
 urldate = {2016-11-27}
}


@misc{Dandapani.2015b,
 abstract = {es6-blog-promises.js},
 author = {Dandapani, Subhas (RDX)},
 year = {2015},
 title = {es6-blog-promises.js},
 url = {https://gist.github.com/rdsubhas/044815c48f9fddb7ac96#file-promises-js},
 urldate = {2016-11-27}
}


@misc{Dandapani.2015c,
 abstract = {es6-blog-generators.js},
 author = {Dandapani, Subhas (RDX)},
 year = {2015},
 title = {es6-blog-generators.js},
 url = {https://gist.github.com/rdsubhas/558b222ee1b1cc46b5e9#file-generators-js},
 urldate = {2016-11-27}
}


@misc{Dean.2007,
 author = {Dean, Jeff},
 year = {2007},
 title = {Software Engineering Advice from Building Large-Scale Distributed Systems},
 url = {research.google.com/people/jeff/stanford-295-talk.pdf},
 series = {CS295 Lecture at Stanford University (July 2007)},
 institutions = {{Stanford University}}
}


@proceedings{Dosch.2008,
 year = {2008},
 title = {2008 Sixth International Conference on Software Engineering Research, Management and Applications // Sixth International Conference on Software Engineering Research, Management and Applications, 2008: SERA '08 ; 20 - 22 Aug. 2008, Prague, Czech Republic},
 address = {Piscataway, NJ},
 publisher = {IEEE},
 isbn = {9780769533025},
 editor = {Dosch, Walter},
 institution = {{International Association for Computer and Information Science} and {ACIS International Conference on Software Engineering Research, Management and Applications} and SERA}
}


@misc{EcmaTC39.,
 author = {{Ecma TC39} and Wirfs-Brock, Allen},
 editor = {{Ecma International}},
 year = {2015},
 title = {ECMAScript 2015 Language Specification},
 url = {http://www.ecma-international.org/ecma-262/6.0/ECMA-262.pdf},
 address = {Genf},
 urldate = {2016-12-26},
 edition = {6th Edition}
}


@misc{EcmaTC39.1997,
 author = {{Ecma TC39} and Steele, Guy L. [Jr.]},
 editor = {{Ecma International}},
 year = {1997},
 title = {ECMA-262, 1st edition, June 1997},
 url = {http://www.ecma-international.org/publications/files/ECMA-ST-ARCH/ECMA-262,%201st%20edition,%20June%201997.pdf},
 address = {Genf},
 urldate = {2016-12-26},
 edition = {1st Edition}
}


@misc{EcmaTC39.2016,
 author = {{Ecma TC39} and Terlson, Brian},
 editor = {{Ecma International}},
 year = {2016},
 title = {ECMAScript 2016 Language Specification},
 url = {https://www.ecma-international.org/ecma-262/7.0/},
 address = {Genf},
 urldate = {2016-12-26},
 edition = {7th Edition}
}


@misc{EcmaTC39committee.2016,
 author = {{Ecma TC39 committee}},
 year = {27.09.2016},
 title = {The TC39 Process},
 url = {https://tc39.github.io/process-document/},
 urldate = {2016-12-22}
}


@book{Elliott.2014,
 author = {Elliott, Eric},
 year = {2014},
 title = {Programming JavaScript Applications},
 keywords = {Application software / Development;Computer algorithms;JavaScript (Computer program language);www.it-ebooks.info},
 address = {Sebastopol, CA},
 publisher = {{O'Reilly Media}},
 isbn = {9781491950296}
}


@misc{FernUniHagen.2016,
 editor = {{FernUniversit{\"a}t in Hagen}},
 year = {2016},
 title = {Modulhandbuch Bachelor Informatik},
 url = {http://www.fernuni-hagen.de/imperia/md/content/fakultaetfuermathematikundinformatik/studiengaenge/bachelorinformatik/modulhandbuch.pdf},
 key = {FernUni Hagen}
}


@book{Flanagan.2011,
 abstract = {Since 1996, JavaScript: The Definitive Guide has been the bible for JavaScript programmers-a programmer's guide and comprehensive reference to the core language and to the client-side JavaScript APIs defined by web browsers.  The 6th edition covers HTML5 and ECMAScript 5. Many chapters have been completely rewritten to bring them in line with today's best web development practices. New chapters in this edition document jQuery and server side JavaScript. It's recommended for experienced programmers who want to learn the programming language of the Web, and for current JavaScript programmers wh},
 author = {Flanagan, David},
 year = {2011},
 title = {JavaScript: The definitive guide ; [activate your web pages ; covers ECMAScript 5 {\&} HTML5]},
 keywords = {Befehlsvorrat;JavaScript;Online-Publikation},
 address = {Beijing},
 edition = {6. ed.},
 publisher = {O'Reilly},
 isbn = {978-0-596-80552-4}
}


@inproceedings{Friedman.1976,
 abstract = {Early results of a project on compiling stylized recursion into stackless iterative code are reviewed as they apply to a target environment with multiprocessing. Parallelism is possible in executing the compiled image of argument evaluation (collateral argument evaluation of Algol 68), of data structure construction when suspensions are used, and of functional combination. The last facility provides general, concise expression for all operations performed in LISP by mapping functions and in APL by typed operators; there are other uses as well.},
 author = {Friedman, Daniel P. and Wise, David S.},
 title = {THE IMPACT OF APPLICATIVE PROGRAMMING ON MULTIPROCESSING},
 pages = {263--272},
 bookpagination = {page},
 volume = {IEEE Cat. No. 76CH1127--OC},
 booktitle = {Proceedings of the International Conference on Parallel Processing},
 year = {1976}
}


@phdthesis{Gallaba.2015,
 abstract = {Modern web applications make extensive use of JavaScript, which is now estimated to be one of the most widely used languages in the world. Callbacks are a popular language feature in JavaScript. However, they are also a source of comprehension and maintainability issues. We studied several features of callback usage across a large number of JavaScript applications and found out that over 43 of all callback-accepting function call sites are anonymous, the majority of callbacks are nested, and more than half of all callbacks are invoked asynchronously. Promises have been introduced as an alternative to callbacks for composing complex asynchronous execution flow and as a robust mechanism for error checking in JavaScript. We use our observations of callback usage to build a developer tool that refactors asynchronous callbacks into Promises. We show that our technique and tool is broadly applicable to a wide range of JavaScript applications.},
 author = {Gallaba, Keheliya},
 year = {2015},
 title = {Characterizing and refactoring asynchronous JavaScript callbacks},
 keywords = {Asynchrony;Callback;JavaScript;Promises;Refactoring},
 address = {Vancouver},
 publisher = {Electrical and Computer Engineering},
 school = {{The University of British Columbia}},
 doi = {10.14288/1.0223155},
 type = {Master Thesis}
}


@inproceedings{Gallaba.b,
 author = {Gallaba, Keheliya and Mesbah, Ali and Beschastnikh, Ivan},
 title = {Don't Call Us, We'll Call You: Characterizing Callbacks in Javascript},
 pages = {1--10},
 bookpagination = {page},
 publisher = {IEEE},
 isbn = {9781467379007},
 editor = {{Institute of Electrical and Electronics Engineers}},
 booktitle = {2015 ACM/IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM)},
 year = {2015},
 address = {Piscataway, NJ},
 doi = {10.1109/ESEM.2015.7321196}
}


@book{Gamma.2005,
 author = {Gamma, Erich},
 year = {2005},
 title = {Design patterns: Elements of reusable object-oriented software},
 keywords = {Automatisch aus GBV{\_}2011-10 2012-05-24;Computer software;Object-oriented programming (Computer science);Objektorientierte Programmierung;Reusability;Software patterns;Softwarewiederverwendung},
 address = {Boston, Mass.},
 edition = {32. printing},
 publisher = {Addison-Wesley},
 isbn = {0201633612},
 series = {Addison-Wesley professional computing series}
}


@book{Ganzinger.2011,
 author = {Ganzinger, Harald and Six, Hans-Werner and Voss, Josef and Beierle, Christoph},
 year = {2011},
 address = {Hagen},
 title = {Logisches und funktionales Programmieren: Kurseinheit 3: Funktionales Programmieren (1. Teil)},
 institution = {{Fernuniversit{\"a}t Hagen}}
}


@misc{Harrington.2015,
 abstract = {Execute asynchronous tasks in order using a pipeline and required modules.},
 author = {Harrington, Chris},
 year = {2015},
 title = {Clean promise chains using a pipeline},
 url = {http://dapperdeveloper.com/2015/06/09/clean-promise-chains-using-a-pipeline/},
 keywords = {javascript node},
 urldate = {2016-12-29},
 date = {2015-6-9},
 month = {6}
}


@misc{Herman.01.04.2016,
 author = {Herman, Dave},
 year = {2011},
 title = {Why coroutines won't work on the web},
 url = {http://calculist.org/blog/2011/12/14/why-coroutines-wont-work-on-the-web/},
 keywords = {continuations;coroutines;generators;JavaScript},
 urldate = {2016-11-25},
 date = {2011-12-14},
 month = {12}
}


@book{Hussain.2015,
 author = {Hussain, Muzzamil},
 year = {2015},
 title = {Mastering JavaScript Promises},
 url = {http://search.ebscohost.com/login.aspx?direct=true&scope=site&db=nlebk&AN=1044434},
 keywords = {Computer programs;JavaScript (Computer program language);Web site development;www.it-ebooks.info},
 address = {s.l.},
 publisher = {{Packt Publishing}},
 isbn = {978-1-78398-550-0},
 series = {Community Experience Distilled}
}


@proceedings{IEEE.2015,
 year = {2015},
 title = {2015 ACM/IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM): Proceedings : 22-23 October 2015, Beijing, China},
 address = {Piscataway, NJ},
 publisher = {IEEE},
 isbn = {9781467379007},
 editor = {{Institute of Electrical and Electronics Engineers}},
 institution = {{ACM/IEEE International Symposium on Empirical Software Engineering and Measurement} and {Association for Computing Machinery} and {Institute of Electrical and Electronics Engineers} and ESEM and {Empirical Software Engineering International Week} and ESEIW}
}


@proceedings{InstituteofElectricalandElectronicsEngineers.1976,
 year = {1976},
 title = {Proceedings of the International Conference on Parallel Processing},
 volume = {IEEE Cat. No. 76CH1127--OC},
 institution = {{Institute of Electrical and Electronics Engineers}}
}


@misc{Joyent.,
 abstract = {Node.js error handling practices},
 author = {Joyent},
 title = {Joyent | Error Handling},
 url = {https://www.joyent.com/node-js/production/design/errors},
 urldate = {2016-11-26}
}


@book{KennedyKambona.2013,
 author = {{Kennedy Kambona} and {Elisa Gonzalez Boix} and {Wolfgang De Meuter}},
 year = {2013},
 title = {An Evaluation of Reactive Programming and Promises for Structuring Collaborative Web Applications: Proceedings of the 7th Workshop on Dynamic Languages and Applications},
 url = {http://dl.acm.org/citation.cfm?id=2489798},
 keywords = {behaviours;callbacks;Computer Science;event streams;futures;JavaScript;Promises;reactive programming},
 address = {New York, NY},
 publisher = {ACM},
 isbn = {9781450320412},
 institution = {{ACM Special Interest Group on Software Engineering} and {ACM Special Interest Group on Programming Languages}}
}


@article{Liskov.1988,
 abstract = {This paper deals with the integration of an efficient asynchronous remote procedure call mechanism into a programming language. It describes a new data type called a promise that was designed to support asynchronous calls. Promises allow a caller to run in parallel with a call and to pick up the results of the call, including any exceptions it raises, in a convenient and type-safe manner. The paper also discusses efficient composition of sequences of asynchronous calls to different locations in a network.},
 author = {Liskov, Barbara and Shrira, Liuba},
 year = {1988},
 title = {Promises: Linguistic support for efficient asynchronous procedure calls in distributed systems},
 pages = {260--267},
 pagination = {page},
 volume = {23},
 number = {7},
 issn = {03621340},
 journal = {ACM SIGPLAN Notices},
 doi = {10.1145/960116.54016}
}


@misc{MicrosoftInc.2016,
 author = {{Microsoft Inc.}, Ecma International},
 editor = {TC39},
 year = {2016},
 title = {Async Functions: Stage 3 Draft / January 26, 2016},
 url = {https://tc39.github.io/ecmascript-asyncawait/#intro},
 urldate = {2016-12-03}
}


@inproceedings{Mikkonen.2007,
 author = {Mikkonen, Tommi and Taivalsaari, Antero},
 title = {Web Applications -Spaghetti Code for the 21st Century},
 pages = {319--328},
 bookpagination = {page},
 publisher = {IEEE},
 isbn = {9780769533025},
 editor = {Dosch, Walter},
 booktitle = {2008 Sixth International Conference on Software Engineering Research, Management and Applications // Sixth International Conference on Software Engineering Research, Management and Applications, 2008},
 year = {2008},
 address = {Piscataway, NJ},
 doi = {10.1109/SERA.2008.16}
}


@misc{Mongoose.2016,
 year = {26.12.2016},
 title = {Mongoose Queries v4.7.5},
 url = {http://mongoosejs.com/docs/queries.html},
 urldate = {2016-12-29}
}


@misc{MozillaDeveloperNetwork.2016,
 abstract = {JavaScript has a concurrency model based on an {\dq}event loop{\dq}. This model is quite different from~models in other languages like C and Java.},
 author = {{Mozilla Developer Network}},
 year = {03.11.2016},
 title = {Concurrency model and Event Loop},
 url = {https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop},
 urldate = {2016-11-24}
}


@misc{Munroe.2016,
 author = {Munroe, Randall},
 year = {02.12.2016},
 title = {xkcd: Code Quality 2},
 url = {http://xkcd.com/1695/},
 urldate = {2016-12-03}
}


@misc{Munroe.2016b,
 author = {Munroe, Randall},
 year = {02.12.2016},
 title = {xkcd: Code Quality},
 url = {http://xkcd.com/1513/},
 urldate = {2016-12-03}
}


@misc{NetscapePressRelease.1996,
 author = {Netscape},
 year = {1996},
 title = {INDUSTRY LEADERS TO ADVANCE STANDARDIZATION OF NETSCAPE'S JAVASCRIPT AT STANDARDS BODY MEETING: (Press Release)},
 url = {https://web.archive.org/web/19981203070212/http://cgi.netscape.com/newsref/pr/newsrelease289.html},
 address = {MOUNTAIN VIEW},
 urldate = {2016-12-26},
 date = {1996-11-15},
 month = {11}
}


@misc{NetscapeSun1995,
 author = {Netscape, Sun},
 year = {1995},
 title = {NETSCAPE AND SUN ANNOUNCE JAVASCRIPT, THE OPEN, CROSS-PLATFORM OBJECT SCRIPTING LANGUAGE FOR ENTERPRISE NETWORKS AND THE INTERNET: (Press Release)},
 url = {https://web.archive.org/web/20070916144913/http://wp.netscape.com/newsref/pr/newsrelease67.html},
 urldate = {2016-11-24},
 date = {1995-12-04},
 month = {12}
}


@book{Parker.2015,
 author = {Parker, Daniel},
 year = {2015},
 title = {JavaScript with promises},
 url = {http://proquest.tech.safaribooksonline.de/9781491930779},
 price = {Print},
 address = {Sebastopol, CA},
 edition = {First edition},
 publisher = {{O'Reilly Media}},
 isbn = {9781449373214}
}


@misc{Poli.2013,
 abstract = {What Node.js and event-driven programming are},
 author = {Poli, Polo-Fran{\c{c}}ois},
 year = {2013},
 title = {Node.js {\&} Event-driven programming},
 url = {http://www.baloo.io/blog/2013/11/30/node-event-driven-programming/},
 keywords = {Event-driven programming;Node.js},
 urldate = {2016-11-24}
}


@misc{Posa.2016,
 author = {Posa, Rambau},
 year = {2016},
 title = {Node JS Architecture - Single Threaded Event Loop - JournalDev},
 url = {http://www.journaldev.com/7462/node-js-architecture-single-threaded-event-loop},
 date = {2016-07-21},
 month = {7}
}


@misc{PromisesA+,
 editor = {Cavalier, Brian and Denicola, Domenic},
 year = {2016},
 title = {Promises/A+},
 url = {https://promisesaplus.com/},
 urldate = {2016-10-25},
 key = {Promises A+}
}


@misc{Rauschmayer.2012,
 abstract = {In this blog post, we give a name to JavaScript's callback-based asynchronous programming style: continuation-passing style  (CPS). We expla...},
 author = {Rauschmayer, Axel},
 year = {2012},
 title = {Asynchronous programming and continuation-passing style in JavaScript},
 url = {http://www.2ality.com/2012/06/continuation-passing-style.html},
 urldate = {2016-11-27},
 date = {2012-06-22},
 month = {6}
}


@misc{Rauschmayer.2016,
 abstract = {In Promise-based asynchronous code, rejections are used for error handling. One risk is that rejections may get lost, leading to silent fa...},
 author = {Rauschmayer, Axel},
 year = {2016},
 title = {Tracking unhandled rejected Promises},
 url = {http://www.2ality.com/2016/04/unhandled-rejections.html},
 urldate = {2016-11-30},
 date = {2016-04-12},
 month = {4}
}


@misc{Rauschmayer.2016b,
 author = {Rauschmayer, Axel},
 year = {19.11.2016},
 title = {Exploring ES6},
 url = {http://exploringjs.com/es6/index.html},
 urldate = {2016-11-26}
}


@misc{RDX.,
 abstract = {Let's take a real life use case with the request library.},
 author = {Dandapani, Subhas (RDX)},
 title = {ES 5-6-7: From Callbacks to Promises to Generators to Async/await},
 url = {https://medium.com/@rdsubhas/es6-from-callbacks-to-promises-to-generators-87f1c0cd8f2e#.jaw4p820d},
 urldate = {2016-10-25}
}


@misc{SanSouci.2014,
 author = {{San Souci}, Benjamin and Lemaire, Maude},
 date = {2014},
 title = {An Inside Look at the Architecture of NodeJS},
 url = {https://mcgill-csus.github.io/student_projects/Submission2.pdf#},
 urldate = {2016-11-26},
 institution = {{Mc Gill Univerity}},
 year = {2014}
}


@misc{Schlueter.2013,
 abstract = {Designing APIs for Asynchrony New 2014-06-30: You can contain Zalgo with the dezalgo module Some people asked me to explain what I meant by ``releasing Zalgo'' in async APIs, so I thought I'd share the...},
 author = {Schlueter, Isaac Z.},
 year = {2013},
 title = {Designing APIs for Asynchrony},
 url = {http://blog.izs.me/post/59142742143/designing-apis-for-asynchrony},
 urldate = {2016-11-25},
 date = {2013-08-23},
 month = {8}
}


@misc{Sengstacke.2016,
 abstract = {IntroductionTranspilers, or source-to-source compilers, are tools that read source code written in one programming language, and produce the equivalent code in another language. Languages...},
 author = {Sengstacke, Peleke},
 year = {2016},
 title = {JavaScript Transpilers: What They Are {\&} Why We Need Them},
 url = {https://scotch.io/tutorials/javascript-transpilers-what-they-are-why-we-need-them},
 urldate = {2016-12-07},
 date = {2016-04-25},
 month = {4}
}


@misc{Sharp.2010,
 abstract = {What is a Polyfill?},
 author = {Sharp, Remy},
 year = {2010},
 title = {What is a Polyfill?},
 url = {https://remysharp.com/2010/10/08/what-is-a-polyfill},
 urldate = {2016-12-07},
 date = {2010-10-08},
 month = {10}
}


@book{Simpson.2015,
 author = {Simpson, Kyle},
 year = {2015},
 title = {Async {\&} performance},
 price = {Pb. : EUR 16.00 (DE)},
 keywords = {Asynchronbetrieb;JavaScript},
 address = {Beijing and Cambridge and Farnham and K{\"o}ln and Sebastopol and Tokyo},
 edition = {First edition},
 publisher = {O'Reilly},
 isbn = {9781491904220},
 series = {You don't know JS},
 url = {https://github.com/getify/You-Dont-Know-JS}
}


@book{Simpson.2016,
 author = {Simpson, Kyle},
 year = {2016},
 title = {ES6 and beyond},
 price = {pbk},
 keywords = {JavaScript},
 address = {Beijing and Boston and Farnham and Sebastopol and Tokyo},
 edition = {First edition},
 publisher = {O'Reilly},
 isbn = {9781491904244},
 series = {You don't know JS}
}


@misc{Stackoverflow.2016,
 abstract = {What do devs do. What do devs want. Read the results of the largest, most comprehensive developer survey ever conducted.},
 author = {Stackoverflow},
 year = {2016},
 title = {Stack Overflow Developer Survey 2016 Results},
 url = {http://stackoverflow.com/research/developer-survey-2016},
 urldate = {2016-11-26}
}


@book{Stefanov.2010,
 abstract = {What's the best approach for developing an application with JavaScript? This book helps you answer that question with numerous JavaScript coding patterns and best practices. If you're an experienced developer looking to solve problems related to objects, functions, inheritance, and other language-specific categories, the abstractions and code templates in this guide are ideal -- whether you're writing a client-side, server-side, or desktop application with JavaScript.  Written by JavaScript expert Stoyan Stefanov -- Senior Yahoo! Technical and architect of YSlow 2.0, the web page performance},
 author = {Stefanov, Stoyan},
 year = {2010},
 title = {JavaScript Patterns},
 keywords = {JavaScript;Online-Publikation},
 address = {Sebastopol, Calif.},
 publisher = {O'Reilly},
 isbn = {9780596806750}
}


@book{Steinmann.2010,
 author = {Steinmann, Friedrich},
 year = {2010},
 title = {Objektorientierte Programmierung: Vorlesungsskript zum Kurs 1814},
 address = {Hagen},
 institution = {{Fernuniversit{\"a}t Hagen}}
}


@misc{Taft.2016,
 abstract = {According to the latest Stack Overflow developer survey, JavaScript is the most popular programming language and Rust is most loved.},
 author = {Taft, Darryl K.},
 year = {2016},
 title = {JavaScript Most Popular Language: Stack Overflow Report},
 url = {http://www.eweek.com/developer/javascript-most-popular-language-stack-overflow-report.html},
 keywords = {ECMAScript;JavaScript;Rust;Sencha;Stack Overflow;Swift;Toptal},
 urldate = {2016-11-24},
 date = {2016-03-17},
 month = {3}
}


@misc{Tarik.2014,
 author = {Tarik},
 year = {2014},
 title = {Understanding the Event Loop},
 url = {http://stackoverflow.com/q/21607692/2682209},
 urldate = {2016-11-24}
}


@misc{Tiobe,
 abstract = {The TIOBE Programming Community index is an indicator of the popularity of programming languages.},
 editor = {{TIOBE Software BV}},
 year = {2016},
 title = {TIOBE Index for November 2016},
 url = {http://www.tiobe.com/tiobe-index/},
 urldate = {2016-11-24},
 key = {TIOBE}
}


@misc{TJHolowaychuk.2013,
 author = {Holowaychuk, T. J.},
 year = {2013},
 title = {Callbacks vs Coroutines: A look at callbacks vs generators vs coroutines},
 url = {https://medium.com/@tjholowaychuk/callbacks-vs-coroutines-174f1fe66127#.b34b0ls63},
 urldate = {2016-11-18}
}


@misc{TJHolowaychuk.2013b,
 abstract = {generator async control flow goodness},
 author = {Holowaychuk, T. J.},
 year = {2013},
 title = {co: generator async control flow goodness},
 url = {https://www.npmjs.com/package/co},
 keywords = {async;coro;coroutine;flow;generator},
 urldate = {2016-12-03}
}


@misc{user568109.2013,
 author = {user568109},
 year = {2013},
 title = {Node.Js Processing Model},
 url = {http://stackoverflow.com/a/14797071/2682209},
 urldate = {2016-11-24}
}


@misc{vanderMeer.2015,
 abstract = {Node.js callback style; run multiple async tasks in parallel},
 author = {{van der Meer}, Bran},
 year = {2015},
 title = {Node.js callback style; run multiple async tasks in parallel},
 url = {https://gist.github.com/branneman/d3e3d98703aa6e31701a},
 urldate = {2016-11-27}
}


